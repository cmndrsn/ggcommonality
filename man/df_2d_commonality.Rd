% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scatterpie-commonality.R
\name{df_2d_commonality}
\alias{df_2d_commonality}
\title{Make scatterpie commonality line range plots}
\usage{
df_2d_commonality(formulae, data, interval = c(0.025, 0.975), ...)
}
\arguments{
\item{formulae}{Array containing two formulae with the same predictors.
Normally for linear regression on valence and arousal.}

\item{data}{Data.frame object corresponding to formula}

\item{interval}{Numeric array of 2 values representing confidence interval to be computed.}

\item{...}{Additional parameters passed to [run_commonality_bootstrap()]}
}
\value{
Data frame of bootstrapped commonality analysis with appropriate pie chart proportions to represent commonality coefficients
}
\description{
Create dataframe containing information for visualizing 2-dimensional commonality analysis with scatterpie (bootstrap generalization)
}
\details{
One way of visualizing commonality effects and their coefficients in
a two-dimensional plot is to plot coefficients along with their 95 percent CIs.
However, differentiating effect can be difficult as many explain only
a small amount of variance. This function prepares a dataframe which
can be used with the scatterpie package in R to colour-code effects
Circles are proportioned according to the number of cues involved in
the commonality such that the circle is split in half for two-ways
commonalities, in thirds for three-way commonalities, etc.
}
\examples{
 df_2d_com <- df_2d_commonality(
  c(
    mpg ~ cyl + disp + wt,
    hp ~ cyl + disp + wt
    ),
  data = mtcars,
  groups = NULL,
  n_replications = 100
) |> suppressWarnings()

# create plotting function with scatterpie package

df_2d_com |>
  dplyr::filter(effect != "Total") |>
  ggplot2::ggplot(
    ggplot2::aes(x=var_mpg, y=var_hp)
    ) +
  scatterpie::geom_scatterpie(
    ggplot2::aes(
      x=var_mpg,
       y = var_hp
      ), # adjust radius parameter to change circle
    cols = c("cyl", "disp", "wt")
    )+
  ggplot2::geom_linerange(
    ggplot2::aes(ymin=lci_hp, ymax=uci_hp)
    )+
  ggplot2::geom_linerange(
    ggplot2::aes(xmin = lci_mpg, xmax = uci_mpg)
    )+
  ggplot2::coord_equal()
}
